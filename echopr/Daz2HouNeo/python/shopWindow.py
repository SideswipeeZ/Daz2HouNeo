import os, base64, hou, re
from Qt import QtCore, QtWidgets, QtCompat, QtGui
from Qt.QtWidgets import QFileDialog
from PIL import Image
sessID = ''
#Global Vars
txDirList = []
shopList = []
shopPaths = []
##Labels
label_shop = ["Name","Connected Input","Filename","Connected Node" ]
label_tx = ["Preview","FileName","Path"]

#Table Vars
shaderSel = -1
rootP = ""

class shopWindow(QtWidgets.QMainWindow):
	def __init__(self, rootPath, sessID,parent=None):
		super(shopWindow, self).__init__(parent, QtCore.Qt.WindowStaysOnTopHint)
		global sessID1, rootP
		sessID1 = sessID
		rootP = rootPath

		gwUi = os.path.join(rootPath + "\Assets\shopWindow.ui")
		self.mw = QtCompat.loadUi(gwUi)
		self.setCentralWidget(self.mw)
		self.setWindowTitle("Shader - Menu")

		self.changeIndex(0)

		########################################
		#                 PIXMAP               #
		########################################
		#Header Image Main (Base64) 'data:image/png;base64,'
		header64M = ""
		header_dataM = base64.b64decode(header64M)
		header_pixmapM = QtGui.QPixmap()
		header_pixmapM.loadFromData(header_dataM)
		#Assign to Label
		self.mw.lbl_header_main.setPixmap(header_pixmapM)

		#Init Console Label
		self.mw.lbl_console.setText("...")

		########################################
		#              Button                  #
		########################################
		# Arnold Button
		ar64 = ''
		ar64_Data = base64.b64decode(ar64)
		arPixmap = QtGui.QPixmap()
		arPixmap.loadFromData(ar64_Data)
		self.mw.bttn_Arnold.setIcon(arPixmap)
		self.mw.bttn_Arnold.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_Arnold.clicked.connect(lambda: self.changeIndex(1))

		# Redshift Button
		rs64 = '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'
		rs64_Data = base64.b64decode(rs64)
		rsPixmap = QtGui.QPixmap()
		rsPixmap.loadFromData(rs64_Data)
		self.mw.bttn_Redshift.setIcon(rsPixmap)
		self.mw.bttn_Redshift.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_Redshift.clicked.connect(lambda: self.consoleOut("Coming Soon~ish"))

		# Octane Button
		oc64 = 'iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAADF0lEQVR4nO1bv08UQRT+7jgIInq5EH9AJNFYGAuu0sTCworEgloqTNQGDDQ2mthQ+C8cf4mNpYWW/gE21loYjREShCNDZs3mnN19P2aY3Vm/5DVwb9773rydeTP7dgpx0Y1sPypGAMZWRm0m37oguMi3Jghl5DMZ1MDPIOgSyCedAZTZTxYU8snOPoV8srM/QyT/f/ZTBJV8kgGYY5BPMv05sz/r0L/IHCMLpNHrhCB0mfHbeabjnZwelzQlKANpUBaEJzbfJHxLKY8q52cqyA9qTj6TQlBSqsmzr86AqgEaTT7DlDCFmpD+O5NOu+7kjghBckXyDSW6kfGBal7yKNR99seumqNof+wSM2EPwFYuALFg/PgG4B2AzwB+Azi2vvQAnAfwHcABxz/qij4irhshZJWwNYvBreg4sgtgaIutPoCrAB4Ky99bIbPON/GRJVuGFcG4K6EC4LOw4Zz6+gLbwTLBF/lppl1JJgQJgo8suCG0/VJga9kz/1OcVepPoh/aHvXt7J6CxC+F7g+BziaARwqbTnQUGfBUaVtql/QoUDNgrMiCfaGeFq9CDCpZEHeVNjXrz52qwbkdGs8FBC4JdDJoy9wnSn0nqG978jIntLXhYQu+V2ZA0iNkTolXANxl6JiT2EemHePbJ6aOC4cA3noY5x9w1wNuve6zDF8IEQCJk0PCmF271vgib+R1qABIgmB+v2arvJ5NdbOuXBOWvlTphQwCpf0ltmwUOa5B9vaIcn0WAqZCvUkct3Q3cKFJr7iovpIXwya84VkX+PyCGoC6kzdyQThxpONy3ckXkegR9f+iqd3a7wv+/gfAA+3gmrP/WUnVIUnVj0xNo7qlfx7rBXqudpzCIAwD7wZm7HMCPerNrwnCMwD3ffUNmZJ1URkU1yz4nn0WfHVUTdsz/1Lu/v8ngK/2Smxcolv2v0mY6/UvnnyuBTgLbpL9hLcZAQjS/xe7Dtgm/m6J+ag0AtTtttWd5K1vo4/9YWcwUMgvJsr9tML0Ve01Etfb+tznUbQGtOob4tm2f0CdwawJj6NYBnAC9AJWPLZa2XsAAAAASUVORK5CYII='
		oc64_Data = base64.b64decode(oc64)
		ocPixmap = QtGui.QPixmap()
		ocPixmap.loadFromData(oc64_Data)
		self.mw.bttn_Octane.setIcon(ocPixmap)
		self.mw.bttn_Octane.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_Octane.clicked.connect(lambda: self.consoleOut("Coming Soon~ish"))

		#######

		self.mw.bttn_1.setIcon(arPixmap)
		self.mw.bttn_1.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_1.clicked.connect(self.conMat)

		self.mw.bttn_2.setIcon(arPixmap)
		self.mw.bttn_2.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_2.clicked.connect(self.createOccluWireframe)

		self.mw.bttn_3.setIcon(arPixmap)
		self.mw.bttn_3.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_3.clicked.connect(self.createArnoldHair)

		self.mw.bttn_4.setIcon(arPixmap)
		self.mw.bttn_4.setIconSize(QtCore.QSize(32,32))
		self.mw.bttn_4.clicked.connect(self.createArnoldSkin)

		# Button for Texture Map Assignment Menu
		self.mw.bttn_texAssignArnold.clicked.connect(lambda: self.changeIndex(2))


		############################# TABLE BUTTONS #################################
		### Select Arnold Shader Button
		self.mw.bttn_select_shader.clicked.connect(self.loadShaderNodes)
		# Select Texture Directory Button
		self.mw.bttn_select_txdir.clicked.connect(self.loadTxDir)
		##Reset Buttons
		self.mw.bttn_reset_shadersel.clicked.connect(self.loadShaderTable)
		self.mw.bttn_reset_txDir.clicked.connect(self.loadTxTable)
		##Disable Buttons for clarity
		self.mw.bttn_reset_shadersel.setDisabled(True)
		self.mw.bttn_reset_txDir.setDisabled(True)
		## Clear Fields Button
		self.mw.bttn_clearfields.clicked.connect(self.clearFields)

		##Table Events
		self.mw.table_shader.clicked.connect(self.shopTableSel)
		self.mw.table_texture.doubleClicked.connect(self.txTableSel)






		#Back to Menu Button
		## Back Button Base64
		back64 = 'iVBORw0KGgoAAAANSUhEUgAAAWkAAAA9CAYAAABvE5gbAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHTmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDUgNzkuMTYzNDk5LCAyMDE4LzA4LzEzLTE2OjQwOjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIwLTA5LTA2VDAwOjA2OjAzKzAxOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTA5LTA2VDIzOjI2OjQ4KzAxOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMC0wOS0wNlQyMzoyNjo0OCswMTowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpiNzcxNDM0NS0yNWU2LWE2NGMtYWYyYi1iMmQ2YTBmNjEyZmEiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDoxYjdiNmY4YS04ZTUzLThiNDUtODJhZC1iMzJhMzEyYzQ3MzkiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpmYjI1ZmI0NC1iN2U3LTUzNDItOTJlNy02ZTcyZjI2ODQ3YWEiIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmZiMjVmYjQ0LWI3ZTctNTM0Mi05MmU3LTZlNzJmMjY4NDdhYSIgc3RFdnQ6d2hlbj0iMjAyMC0wOS0wNlQwMDowNjowMyswMTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDplMDQ4YzdhMS01NTExLTU0NGItYWMzOS0wNzgyNGVkNWU0NmIiIHN0RXZ0OndoZW49IjIwMjAtMDktMDZUMDA6MDY6MDMrMDE6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE5IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6Yjc3MTQzNDUtMjVlNi1hNjRjLWFmMmItYjJkNmEwZjYxMmZhIiBzdEV2dDp3aGVuPSIyMDIwLTA5LTA2VDIzOjI2OjQ4KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDxwaG90b3Nob3A6VGV4dExheWVycz4gPHJkZjpCYWc+IDxyZGY6bGkgcGhvdG9zaG9wOkxheWVyTmFtZT0i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'
		back64_Data = base64.b64decode(back64)
		backPixmap = QtGui.QPixmap()
		backPixmap.loadFromData(back64_Data)
		##
		self.mw.bttn_backfooter.setIcon(backPixmap)
		self.mw.bttn_backfooter.setIconSize(QtCore.QSize(361,61 ))
		self.mw.bttn_backfooter.clicked.connect(lambda: self.changeIndex(0))


		#Show Form
		self.show()


	#########################################
	#                 Functions             #
	#########################################

	## CONSOLE UPDATER
	def consoleOut(self,message):
		#Set Console Message
		self.mw.lbl_console.setText(message)

	## Change Index of Stacked Widget
	def changeIndex(self,indx):
		self.consoleOut("...")
		self.mw.stackedWidget.setCurrentIndex(indx)
		if indx == 0:
			self.resize(361,520)
		elif indx == 2:
			self.resize(720,720)

	## Handle Material Convertion
	def conMat(self):
		try:
			nodeToSend = hou.selectedNodes()[0]
			#print(nodeToSend.type())
		except IndexError:
			self.consoleOut('MAT_ERROR: Select a Valid Node!')
		#Check if Node is selected before continuing.
		if nodeToSend:
			if nodeToSend.type().name() == 'material':
				self.convertToArnold(nodeToSend)
			elif nodeToSend.type().name() == 'geo':
				# If type is Geo Loop all material nodes if found.
				mat_nodes = [node for node in nodeToSend.children() if node.type().name() == 'material']
				for each in mat_nodes:
					self.convertToArnold(each)
			elif nodeToSend.type().name() == 'subnet':
				## Find all geo nodes and then find all materials if exists obv
				geo_nodes = [node for node in nodeToSend.children() if node.type().name() == 'geo']
				for each in geo_nodes:
					mat_nodes = [node for node in each.children() if node.type().name() == 'material']
					for nodE in mat_nodes:
						self.convertToArnold(nodE)
			else: # else error as no node type is compatible
				self.consoleOut("ERROR Select a Material Node or its Nested Parent.")

	## Convert Material here ARNOLD. Called by other functions not directly from a button unless specific.
	def convertToArnold(self, node):
		SHOP = hou.node('/mat/')
		#Get Number of materials to create
		nMats = node.parm('num_materials').eval()
		# Create Boxnetwork
		netBox = SHOP.createNetworkBox()
		netBox.setComment('Daz2Hou NEO Arnold NetworkBox')
		#Loop for each material creating a new arnold one.
		for i in range(1,nMats+1):
			#Get Group Name of current loop.
			grp = "Ai_"+(node.parm('group'+str(i)).eval())
			#Check if Shader Exists
			if hou.node("/"+SHOP.name()+"/"+grp) is None:
				#Create Arnold VOP in Root location
				arnoldNode = SHOP.createNode('arnold_materialbuilder', run_init_scripts = True)
				arnoldNode.setName(grp,unique_name=True)
				arnoldNode.moveToGoodPosition()
				#Add Node to Network Box
				netBox.addItem(arnoldNode)
				#Create Shader inside
				#Create 'Smart' type indicator
				Mtype = 'Surface'
				if Mtype == 'Surface':
					surfNode = arnoldNode.createNode('arnold::standard_surface')
					#create image nodes for surface shading
					surfaceType = 1
					if surfaceType == 1:
						
						######################################################
						## Base Colour Node
						baseNode = arnoldNode.createNode('arnold::image')
						baseNode.setName('base')
						# Set Base Colour
						surfNode.setInput(1,baseNode)
						#Set Subsurface Colour
						surfNode.setInput(18,baseNode)
						baseNode.moveToGoodPosition()

						## Specular Colour Set
						specNode = arnoldNode.createNode('arnold::image')
						specNode.setName('specular')
						# Set Specular Input
						surfNode.setInput(4,specNode)
						# Set Sheen Input
						surfNode.setInput(33,specNode)
						specNode.moveToGoodPosition()

						## Sub-Surface Scatter
						sssNode = arnoldNode.createNode('arnold::image')
						sssNode.setName('sss')
						# Set SSS Input
						surfNode.setInput(17,sssNode)
						sssNode.moveToGoodPosition()

						##Normal Input
						NNode = arnoldNode.createNode('arnold::image')
						NNode.setName('normal')
						#Set Normal Input
						surfNode.setInput(39,NNode)
						NNode.moveToGoodPosition()
						######################################################

				elif Mtype == 'Hair':
					surfNode = arnoldNode.createNode('arnold::standard_hair')
				surfNode.moveToGoodPosition()
				outNode = hou.node(SHOP.name()+ "/" + arnoldNode.name()+"/"+"OUT_material")
				outNode.setInput(0,surfNode)
			#Assign Material to Material Group.
			node.parm("shop_materialpath"+str(i)).set("/"+SHOP.name()+"/"+grp)
		netBox.fitAroundContents()
		self.consoleOut('Converted to Arnold Materials')

	## Create Hair Shader Arnold
	def createArnoldHair(self):
		SHOP = hou.node('/mat/')
		#Create Arnold Node in SHOP var level
		arnoldNode = SHOP.createNode('arnold_materialbuilder', run_init_scripts = True)
		arnoldNode.setName("Ai_Hair_DZ",unique_name=True)
		arnoldNode.moveToGoodPosition()
		#Create Hair Node
		hairNode = arnoldNode.createNode('arnold::standard_hair')
		hairNode.moveToGoodPosition()
		#Out Node
		outNode = hou.node(SHOP.name()+ "/" + arnoldNode.name()+"/"+"OUT_material")
		outNode.setInput(0,hairNode)

	## Create Skin Shader
	def createArnoldSkin(self):
		SHOP = hou.node('/mat/')
		#Create Arnold Node in SHOP var level
		arnoldNode = SHOP.createNode('arnold_materialbuilder', run_init_scripts = True)
		arnoldNode.setName("Ai_Skin_DZ",unique_name=True)
		arnoldNode.moveToGoodPosition()	
		#Create Surface Node
		surfNode = arnoldNode.createNode('arnold::standard_surface')
		surfNode.moveToGoodPosition()
		#Out Node
		outNode = hou.node(SHOP.name()+ "/" + arnoldNode.name() + "/" + "OUT_material")
		outNode.setInput(0,surfNode)

		##Change surface node parameters
		# SSS Type=Diffusion, Radius=1,0.35,0.2, Scale=0.05
		surfNode.parm('subsurface_type').set('diffusion')
		surfNode.parm('subsurface').set(0.8)
		surfNode.parmTuple('subsurface_radius').set((1.0,0.35,0.2))
		surfNode.parm('subsurface_scale').set(0.05)
		###########################################################

	##Create Occlusion Wireframe Shader
	def createOccluWireframe(self):
		SHOP = hou.node('/mat/')
		#Create Arnold Node in SHOP var level
		arnoldNode = SHOP.createNode('arnold_materialbuilder', run_init_scripts = True)
		arnoldNode.setName("Ai_WireFrameOcclusion_DZ",unique_name=True)
		arnoldNode.moveToGoodPosition()	
		#Create Multiply Node
		multNode = arnoldNode.createNode('arnold::multiply')
		#Create Wireframe Node
		wireframeNode = arnoldNode.createNode('arnold::wireframe')
		#change Edge Type to Poly & Create a 
		wireframeNode.parm('edge_type').set('polygons')
		wireframeNode.parm('line_width').set(0.5)
		wireframeNode.moveToGoodPosition()
		#Create Ambient Occlusion Node
		occNode = arnoldNode.createNode('arnold::ambient_occlusion')
		occNode.moveToGoodPosition()
		#Connect Wire and Occlusion Nodes
		multNode.setInput(0,wireframeNode)
		multNode.setInput(1,occNode)
		multNode.moveToGoodPosition()
		#Out Node
		outNode = hou.node(SHOP.name()+ "/" + arnoldNode.name() + "/" + "OUT_material")
		outNode.setInput(0,multNode)
		outNode.moveToGoodPosition()

	## Table Functions.
	#Clear Fields in Texture Assign Page.
	def clearFields(self):
		self.consoleOut("...")
		self.mw.lbl_tx_shader.setText("Arnold Shadernet Nodes")
		self.mw.lbl_tx_dir.setText("Loaded: From Directory")
		#Button Disabled
		self.mw.bttn_reset_shadersel.setDisabled(True)
		self.mw.bttn_reset_txDir.setDisabled(True)
		#Clear Tables
		self.mw.table_texture.setRowCount(0)
		self.mw.table_texture.setColumnCount(0)
		self.mw.table_shader.setRowCount(0)
		self.mw.table_shader.setColumnCount(0)
		global txDirList, shopList, shopPaths, shaderSel
		txDirList = []
		shopList = []
		shopPaths = []
		shaderSel = -1

	#Load Shader Nodes
	def loadShaderNodes(self):
		#Get shaders inside valid shadernet (arnold atm)
		target_node = hou.selectedItems()[0]
		#Check if Node is Arnold Vopnet
		if target_node.type().name() == 'arnold_materialbuilder':
			#Get all Image Nodes inside if exist
			imgNodes = [node for node in target_node.children() if node.type().name() == 'arnold::image']
			#Check if more than one exists
			if len(imgNodes) > 0:
				#Print on label out
				self.mw.lbl_tx_shader.setText("Arnold Shadernet: " + target_node.name())
				#Create List for Tuples to be sent to Populate Table with
				global shopPaths
				shopPaths = []
				nodeToTableList = []
				#for each item inside the list, get parms and add to table.
				for node in imgNodes:
					#Get filename parameter and eval to see if it exists.
					#global shopPaths, shaderSel, shopList
					#shopList = []
					#shaderSel = -1
					#shopPaths = []
					shopPaths.append(node.path())
					parameter = node.parm('filename').eval()
					#Get Name of Node
					nodeName = node.name()
					if len(parameter) <= 0:
						parameter = 'None'
					#Outputs of Node
					outs = node.outputConnectors()[0] # Get the RGBA output.
					if len(outs) <= 0:
						#outs = 'Not Connected'
						connectedNodeStr = "None"
					else:
						#Parse Connection.
						#Get Connected Node name from RGBA
						outStr = str(outs)
						splitOut = outStr.split(" ")
						# Get Node Name
						connectedNodeStr = splitOut[6]
						connectedNodeIndex = int(re.sub('\D', '', splitOut[8]))
						
						#Get Connections from Node inside Shader Node (Surface).
						conNode = hou.node(target_node.path() + '/' + connectedNodeStr)
						inputList = conNode.inputNames()
						#Create Dictionary for Values in Inputlist
						connection_Dict = {}
						keys = range(len(inputList))
						#Populate Dictionary
						for i in keys:
							connection_Dict[i] = inputList[i]
						
						# Get Data using get method of dict
						#print(connection_Dict)
						paramTarget = connection_Dict.get(connectedNodeIndex, 'Invalid')
							
					if not paramTarget:
						paramTarget = 'Invalid'
					if not connectedNodeStr:
						connectedNodeStr = 'None'
					if connectedNodeStr == 'None':
						paramTarget = "None"
					#Append Tuple to List.[name,targetparamter,fileParamter,nodeConnName]
					datatoappend = (nodeName,paramTarget,parameter,connectedNodeStr)
					nodeToTableList.append(datatoappend)
				#print(nodeToTableList)
				#Call Load Shader Table
				if len(nodeToTableList) > 0:
					global shopList
					shopList = nodeToTableList
					self.loadShaderTable()
				else:
					self.consoleOut("No Image Nodes Detected.")

	#Load Shaders Nodes in Table
	def loadShaderTable(self):
		#Init Table Widget
		self.mw.table_shader.setRowCount(0)
		self.mw.table_shader.setColumnCount(0)
		#Data should have a set number of items which contain tuples.
		#Images take 1 column to show. (Set it usually on first column)
		global shopList, label_shop
		data = shopList
		rvLabels = label_shop
		#Set Column Count
		self.mw.table_shader.setColumnCount(len(data[0]))
		#Set Header Labels
		for i in range(len(rvLabels)):
			itemA = QtWidgets.QTableWidgetItem(rvLabels[i])
			#itemA.setBackground(QtGui.QColor(255, 0, 0))
			self.mw.table_shader.setHorizontalHeaderItem(i,itemA)
		
		#print(len(data[0]))
		#print(data)
		#Populate Table
		for i in range(len(data)):
			rowPosition = self.mw.table_shader.rowCount()
			self.mw.table_shader.insertRow(rowPosition)
			#Populate Columns in Current Row
			#Create list from tuples
			toLst = data[i]
			counter = 0
			for each in toLst:
				self.mw.table_shader.setItem(rowPosition , counter, QtWidgets.QTableWidgetItem(each)) 
				counter = counter + 1
		#Lastly open button to reset.
		self.mw.bttn_reset_shadersel.setDisabled(False)

	# Load Texture Directory.
	def loadTxDir(self):
		try:
			txdirpath = str(QFileDialog.getExistingDirectory(self, "Select DAZ Texture Directory",r"C:\Users\Public\Documents\My DAZ 3D Library\Runtime\Textures"))
		except:
			txdirpath = str(QFileDialog.getExistingDirectory(self, "Select DAZ Texture Directory"))
		#print(txdirpath)
		#If path exists
		if txdirpath:
			self.mw.lbl_tx_dir.setText("Loaded: " + txdirpath )
			global txDirList
			txDirList = []
			#Get all Compatible Files inside
			valid_images = [".jpg",".png",".bmp"]
			for file in os.listdir(txdirpath):
				#print(file)
				ext = os.path.splitext(file)[1]
				name = os.path.splitext(file)[0]
				if ext.lower() in valid_images:
					#add item to list (filePath,Name)
					tup = ((os.path.join(txdirpath,file)),name)
					txDirList.append(tup)
			if txDirList:
				self.loadTxTable() # Load TX Table with data processed.
		else:
			self.consoleOut("NO Valid Texture Maps Found in Directory.")

	# Load Texture Data to Table
	def loadTxTable(self):
		global txDirList
		#print(txDirList)
		#Init Table Widget
		self.mw.table_texture.setRowCount(0)
		self.mw.table_texture.setColumnCount(0)
		#Set Column count to len of data set
		self.mw.table_texture.setColumnCount(len(txDirList[0])+1)#+1 for image preview.
		#Set column names.
		global label_tx
		headlabels = label_tx
		for i in range(len(headlabels)):
			itemA = QtWidgets.QTableWidgetItem(headlabels[i])
			self.mw.table_texture.setHorizontalHeaderItem(i,itemA)
		#Loop to populate table.
		for i in range(len(txDirList)):
			rowPosition = self.mw.table_texture.rowCount()
			self.mw.table_texture.insertRow(rowPosition)
			#Get Path and Name Vars
			pixpath, itemName = txDirList[i]
			
			#Create Pixmap for Preview
			#pixa = QtGui.QPixmap(pixpath)
			pixData = self.genThumbnail(pixpath)
			pixa = QtGui.QPixmap(pixData)
			#print(pixData)
			imgPreview = QtWidgets.QTableWidgetItem(pixa,"")
			self.mw.table_texture.setItem(rowPosition , 0, imgPreview)
			self.mw.table_texture.setItem(rowPosition , 1, QtWidgets.QTableWidgetItem(itemName))
			self.mw.table_texture.setItem(rowPosition , 2, QtWidgets.QTableWidgetItem(pixpath))
		#Activate Button.
		self.mw.bttn_reset_txDir.setDisabled(False)

	# Generate Thumbnail for Texture Table
	def genThumbnail(self,targetPath):
		imgLoad = Image.open(targetPath)
		sizeImg = 150
		imgLoad.thumbnail((sizeImg,sizeImg))
		global rootP
		tempDir = rootP + "\\temp\\thumbs"
		savename = tempDir + "\\" + "thumb.png"
		imgLoad.save(savename)
		return savename

	#Handle Shader Table Click Event
	def shopTableSel(self,indx):
		global shaderSel
		row = indx.row()
		shaderSel = row

	#Handle Texture Table Double-Click Event
	def txTableSel(self,indx):
		global shopPaths, shaderSel, txDirList
		row = indx.row()
		target = shopPaths[shaderSel] #Target Image Node Path
		#print(target)
		texmap = txDirList[row][0]
		#Apply the Tex map to Target Node
		tarNode = hou.node(target)
		tarNode.parm('filename').set(texmap)
		#ReScan and Update Table.
		self.loadShaderNodes()


	###########################################################################

	## CLOSE EVENT OF WINDOW
	def closeEvent(self,event):
		print("Daz to Houdini NEO: closing Shader Window (shopWindow) "+ sessID1 + '.')