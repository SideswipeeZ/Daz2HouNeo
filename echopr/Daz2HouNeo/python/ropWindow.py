import os, base64, hou
from Qt import QtCore, QtWidgets, QtCompat, QtGui
from Qt.QtWidgets import QFileDialog
from Qt.QtGui import QColor, QPixmap, QPainter
sessID = ''
#Arnold Light Tool Vars
###
preview64 = "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGu2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDUgNzkuMTYzNDk5LCAyMDE4LzA4LzEzLTE2OjQwOjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOCAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDE5LTA4LTAzVDE2OjI0OjUwKzAxOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTEyLTA1VDAwOjMxOjUwWiIgeG1wOk1vZGlmeURhdGU9IjIwMjAtMTItMDVUMDA6MzE6NTBaIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjZjYmQ1MTI1LWZkMDEtYjk0MS05NjgyLTU5M2EwYjZmMjY1NCIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOjNjOWFhZmFhLWI3YTYtMDU0Yy04ZWY3LWNjYmQwMjFjMWIwOCIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjk0MDZmNDIwLWE2ZDgtYjE0Yi04N2MwLTg5Njc0ZTdkY2JkNiIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6OTQwNmY0MjAtYTZkOC1iMTRiLTg3YzAtODk2NzRlN2RjYmQ2IiBzdEV2dDp3aGVuPSIyMDE5LTA4LTAzVDE2OjI0OjUwKzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOCAoV2luZG93cykiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmEyYTk2N2QyLTRlMWMtNTk0Yy1hMzE5LTA1MGEwYmI4YzVmNSIgc3RFdnQ6d2hlbj0iMjAxOS0wOC0wM1QxNjoyNDo1MCswMTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTggKFdpbmRvd3MpIiBzdEV2dDpjaGFuZ2VkPSIvIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo2Y2JkNTEyNS1mZDAxLWI5NDEtOTY4Mi01OTNhMGI2ZjI2NTQiIHN0RXZ0OndoZW49IjIwMjAtMTItMDVUMDA6MzE6NTBaIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+fjg5tQAABzxJREFUeJzt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"
preview_data = base64.b64decode(preview64)
cd_pix2 = QtGui.QPixmap()
cd_pix2.loadFromData(preview_data)
###
selNodes = []
cdR = 0.5
cdG = 0.5
cdB = 0.5
class ropWindow(QtWidgets.QMainWindow):
	def __init__(self, rootPath, sessID,parent=None):
		super(ropWindow, self).__init__(parent, QtCore.Qt.WindowStaysOnTopHint)

		global sessID1
		sessID1 = sessID

		gwUi = os.path.join(rootPath + "\Assets\\ropWindow.ui")
		self.mw = QtCompat.loadUi(gwUi)
		self.setCentralWidget(self.mw)
		self.setWindowTitle("Shader - Menu")

		########################################
		#                 PIXMAP               #
		########################################
		#Header Image Main (Base64) 'data:image/png;base64,'
		header64M = ""
		header_dataM = base64.b64decode(header64M)
		header_pixmapM = QtGui.QPixmap()
		header_pixmapM.loadFromData(header_dataM)
		#Assign to Label
		self.mw.lbl_header_main.setPixmap(header_pixmapM)

		#Init Console Label
		self.mw.lbl_console.setText("...")

		########################################
		#              Button                  #
		########################################

		#Back to Menu Button
		## Back Button Base64
		back64 = 'iVBORw0KGgoAAAANSUhEUgAAAWkAAAA9CAYAAABvE5gbAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHTmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDUgNzkuMTYzNDk5LCAyMDE4LzA4LzEzLTE2OjQwOjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIwLTA5LTA2VDAwOjA2OjAzKzAxOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIwLTA5LTA2VDIzOjI2OjQ4KzAxOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMC0wOS0wNlQyMzoyNjo0OCswMTowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpiNzcxNDM0NS0yNWU2LWE2NGMtYWYyYi1iMmQ2YTBmNjEyZmEiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDoxYjdiNmY4YS04ZTUzLThiNDUtODJhZC1iMzJhMzEyYzQ3MzkiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpmYjI1ZmI0NC1iN2U3LTUzNDItOTJlNy02ZTcyZjI2ODQ3YWEiIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmZiMjVmYjQ0LWI3ZTctNTM0Mi05MmU3LTZlNzJmMjY4NDdhYSIgc3RFdnQ6d2hlbj0iMjAyMC0wOS0wNlQwMDowNjowMyswMTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTkgKFdpbmRvd3MpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDplMDQ4YzdhMS01NTExLTU0NGItYWMzOS0wNzgyNGVkNWU0NmIiIHN0RXZ0OndoZW49IjIwMjAtMDktMDZUMDA6MDY6MDMrMDE6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE5IChXaW5kb3dzKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6Yjc3MTQzNDUtMjVlNi1hNjRjLWFmMmItYjJkNmEwZjYxMmZhIiBzdEV2dDp3aGVuPSIyMDIwLTA5LTA2VDIzOjI2OjQ4KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDxwaG90b3Nob3A6VGV4dExheWVycz4gPHJkZjpCYWc+IDxyZGY6bGkgcGhvdG9zaG9wOkxheWVyTmFtZT0i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'
		back64_Data = base64.b64decode(back64)
		backPixmap = QtGui.QPixmap()
		backPixmap.loadFromData(back64_Data)
		##
		self.mw.bttn_backfooter.setIcon(backPixmap)
		self.mw.bttn_backfooter.setIconSize(QtCore.QSize(361,61 ))
		self.mw.bttn_backfooter.clicked.connect(lambda: self.changeIndex(0))

		# Arnold Button
		ar64 = ''
		ar64_Data = base64.b64decode(ar64)
		arPixmap = QtGui.QPixmap()
		arPixmap.loadFromData(ar64_Data)
		self.mw.bttn_ar.setIcon(arPixmap)
		self.mw.bttn_ar.setIconSize(QtCore.QSize(32,32))
		#Second Arnold Button
		self.mw.bttn_ar2.setIcon(arPixmap)
		self.mw.bttn_ar2.setIconSize(QtCore.QSize(32,32))

		##Button 1
		self.mw.bttn_1.clicked.connect(lambda: self.changeIndex(1))

		self.mw.bttn_2.clicked.connect(lambda: self.createArnoldRop(False))

		self.mw.bttn_ar.clicked.connect(lambda: self.consoleOut('Arnold'))
		self.mw.bttn_ar2.clicked.connect(lambda: self.consoleOut('Arnold'))

		self.mw.bttn_createRop.clicked.connect(lambda: self.createArnoldRop(True))
		self.mw.bttn_applyArnold.clicked.connect(self.applyAOV_Arnold_Manual)

		self.mw.bttn_lightmenu.clicked.connect(lambda: self.changeIndex(2))
		self.mw.bttn_lighttoolmenu.clicked.connect(lambda: self.changeIndex(3))

		#Reset Lights Button
		#self.mw.bttn_resetlights.clicked.connect()

		########################################
		#          Arnold Lights Create
		########################################
		self.mw.bttn_ai_point.clicked.connect(lambda: self.createAiLights(0))
		self.mw.bttn_ai_distant.clicked.connect(lambda: self.createAiLights(1))
		self.mw.bttn_ai_spot.clicked.connect(lambda: self.createAiLights(2))
		self.mw.bttn_ai_quad.clicked.connect(lambda: self.createAiLights(3))
		self.mw.bttn_ai_disk.clicked.connect(lambda: self.createAiLights(4))
		self.mw.bttn_ai_cylinder.clicked.connect(lambda: self.createAiLights(5))
		self.mw.bttn_ai_skydome.clicked.connect(lambda: self.createAiLights(6))
		self.mw.bttn_ai_mesh.clicked.connect(lambda: self.createAiLights(7))
		self.mw.bttn_ai_ies.clicked.connect(lambda: self.createAiLights(8))

		###########################################
		#         ARNOLD LIGHT TOOL 
		#Node Selection Buttons
		self.mw.bttn_nodes.clicked.connect(self.procMain)
		self.mw.bttn_deSelNodes.clicked.connect(self.deSel)

		#Exposure Buttons
		self.mw.bttn_setExposure.clicked.connect(self.setExpVal)
		self.mw.bttn_multiply.clicked.connect(self.setExpMult)

		#Light Target Buttons
		self.mw.bttn_lightgroup.clicked.connect(self.getTarget)
		self.mw.bttn_clearTar.clicked.connect(self.clearTar)
		self.mw.bttn_removeTar.clicked.connect(self.removeTar)

		#Light Group Buttons
		self.mw.bttn_setLG.clicked.connect(self.setLG)
		self.mw.bttn_LGClear.clicked.connect(self.clearLG)

		#Colour Sliders
		self.mw.Cd_Slider_R.valueChanged.connect(lambda: self.cdSet("r"))
		self.mw.Cd_Slider_G.valueChanged.connect(lambda: self.cdSet("g"))
		self.mw.Cd_Slider_B.valueChanged.connect(lambda: self.cdSet("b"))

		#Clear Fields
		self.mw.nodeListV.clear()
		self.mw.lcdNumber.display(0)

		#Init Fields
		#Set Colour Params in Preview
		self.cdSet("r")
		self.cdSet("g")
		self.cdSet("b")


		###########################################

		#Check if Arnold ROP Exists in Current Session
		if 'arnold' in hou.ropNodeTypeCategory().nodeTypes():
			pass
		else:
			self.consoleOut('WARNING:< ARNOLD NOT DETECTED >')


		#Show Form
		self.show()


	#########################################
	#                 Functions             #
	#########################################

	## CONSOLE UPDATER
	def consoleOut(self,message):
		self.mw.lbl_console.setText(message)

	## CONSOLE LABLE UPDATER
	def changeIndex(self,indx):
		self.consoleOut("...")
		self.mw.stackedWidget.setCurrentIndex(indx)

	## Create Default Arnold Material
	def createArnoldRop(self, createAOV):
		ROP = hou.node('/out/')
		arnoldRop = ROP.createNode('arnold')
		arnoldRop.setName('arnoldDaz1',unique_name=True)
		arnoldRop.moveToGoodPosition()
		#IF create aov button pressed.
		if createAOV == True:
			self.applyAOV_Arnold(arnoldRop,True)
			self.consoleOut('Created Arnold AOV ROP @ ' + ROP.name() + ' Level')
		elif createAOV == False:
			self.consoleOut('Created Default Arnold ROP @ ' + ROP.name() + ' Level')

	##Apply Manual AOVs to Node From Selection
	def applyAOV_Arnold_Manual(self):
		ropnode = hou.selectedNodes()[0]
		self.applyAOV_Arnold(ropnode,False)

	## AOV ROP Parameter Logic
	def applyAOV_Arnold(self, ropnode, newnode):
		## See if Node Type is Arnold.
		if ropnode.type().name() == 'arnold':
			## Get all AOVs to Add from Tick Boxes
			aov_list = self.getAOVsArnold()
			#if AOV List isnt empty aka greater than zero
			if len(aov_list) > 0:
			## If New Node then add to list, else eval parameters from node
				if newnode == True:
					#Add AOVs to ROP
					ropnode.parm('ar_aovs').set(len(aov_list))
					## Add items to AOVs
					for i in range(0, len(aov_list)):
						ropnode.parm('ar_aov_label'+ str((i+1))).set(aov_list[i])
				#Apply AOVS to ropnode
				elif newnode == False:
					##Eval AOVS in current Arnold ROP Compare AOVs inside ROP from List.
					current_rop_aovs = ropnode.parm('ar_aovs').eval()
					if current_rop_aovs > 0:
						store_aov_names = []
						for i in range(0, current_rop_aovs):
							store_aov_names.append(ropnode.parm('ar_aov_label'+ str((i+1))).eval())
						#Check if AOV ids are stored inside aov_list from user.
						diff_aov = [x for x in aov_list if x not in store_aov_names]
						if len(diff_aov) > 0:
							#Append the amount of AOVs on ROP to add more.
							# Add the Difference in AOVs Exisiting and New to Add.
							ropnode.parm('ar_aovs').set((current_rop_aovs + len(diff_aov)))
							#Start Loop from New AOVs
							for i in range(0,len(diff_aov)):
								ropnode.parm('ar_aov_label'+ str((i+(current_rop_aovs+1)))).set(diff_aov[i])

	## Get Arnold AOVs to add to List
	def getAOVsArnold(self):
		aov_lst = []
		## Add Items to AOV list Based on Tickboxes (Subject to Change for a Cleaner Solution)
		addManual = True
		if addManual == True:
			## IF Check Marked
			if self.mw.tk_aov_RGB.isChecked():
				aov_lst.append('RGBA')
			if self.mw.tk_aov_Normal.isChecked():
				aov_lst.append('N')
			if self.mw.tk_aov_Direct.isChecked():
				aov_lst.append('direct')
			if self.mw.tk_aov_Indirect.isChecked():
				aov_lst.append('indirect')
			if self.mw.tk_aov_Albedo.isChecked():
				aov_lst.append('albedo')
			if self.mw.tk_aov_SSS.isChecked():
				aov_lst.append('sss')
			if self.mw.tk_aov_Sheen.isChecked():
				aov_lst.append('sheen')
			if self.mw.tk_aov_Specular.isChecked():
				aov_lst.append('specular')
				aov_lst.append('specular_indirect')
		#Return List to function to add AOVs to ROP
		return aov_lst

	# Get Light Version Name
	def getAiLightTypeName(self,verGet):
		if verGet == 0:
			return "Point"
		if verGet == 1:
			return "Distant"
		if verGet == 2:
			return "Spot"
		if verGet == 3:
			return "Quad"
		if verGet == 4:
			return "Disk"
		if verGet == 5:
			return "Cylinder"
		if verGet == 6:
			return "Skydome"
		if verGet == 7:
			return "Mesh"
		if verGet == 8:
			return "IES"

	# Create Arnold Lights
	def createAiLights(self,lightver):
		OBJ = hou.node('/obj/')
		ar_lightN = OBJ.createNode('arnold_light')
		ar_lightN.parm('ar_light_type').set(lightver)
		arl_name = self.getAiLightTypeName(lightver)
		ar_lightN.setName( ('arnoldDaz_'+ str(arl_name) ),unique_name=True)
		ar_lightN.moveToGoodPosition()


	#########################################
	#        AI LIGHT TOOL Functions        #
	#########################################
	def procMain(self,*args):
		self.consoleUpdate('Selecting Nodes')
		global selNodes
 
		selNodes = []
		self.getNodes()
		self.mw.nodeListV.clear()
		self.mw.lcdNumber.display(0)
		
		nonAiLight = ''
		if self.mw.node_errorOp.isChecked() == True:
			nonAiLight = 'Abort'
		else:
			nonAiLight = 'Pass'
		if self.checkNodes(nonAiLight) == True:
			#Populate ListView with Selected Nodes Names.
			for i in selNodes:    
				item = str(i)
				self.mw.nodeListV.addItem(item)
		self.mw.lcdNumber.display(len(selNodes))

	#De-Selects all Nodes and resets list view and lcd number.
	def deSel(self,*args):
		global selNodes
		selNodes = []
		self.mw.nodeListV.clear()
		self.mw.lcdNumber.display(0)
		
	#Check for Arnold Lights (Stops if Error Is Detected.)
	def checkNodes(self,signal):
		global selNodes
		status = signal
		wNode = 0
		nodeRemove = []
		for each in selNodes:
			itemType = str(each.type())
			itemType = itemType.rsplit(' ', 1)[-1]
			if not itemType == 'arnold_light' + '>':
				wNode = 1
				nodeRemove.append(each)
		tmpLst = [x for x in selNodes if x not in nodeRemove]
		selNodes = tmpLst
		if status == 'Abort':
			if wNode == 1:
				self.consoleUpdate('Non Arnold Light Detected, Aborting')
				return False   
			elif wNode == 0:
				return True
		elif status == 'Pass':
			return True
			
	#update console label in app not the python shell.    
	def consoleUpdate(self,message):
		#Internal Console.
		self.mw.lblOUT.setText(("Console: "+str(message)))
		
	#Gets node selection
	def getNodes(self):
		global selNodes
		selNodes = hou.selectedNodes()
		
	#EXPOSURE SETTING SUBROUTINES AND FUNCTIONS    
	def setExpVal(self,*args):
		
		
		minVal = self.mw.MindoubleSpinBox.value()
		maxVal = self.mw.MaxdoubleSpinBox.value()
		
		self.consoleUpdate('Setting Exposure Values')
		for each in selNodes:
			if minVal != 0:
				each.parm('ar_intensity').set(minVal)
				#hou.parm('/obj/'+ str(each) +'/ar_intensity').set(minVal)
			if maxVal != 0:    
				each.parm('ar_exposure').set(maxVal)
				#hou.parm('/obj/'+ str(each) +'/ar_exposure').set(maxVal)
			
	def setExpMult(self,*args):
		multVal = self.mw.multSpinBox.value()
		self.consoleUpdate('Multiplying Values.')
		for each in selNodes:
			inV = each.parm('ar_intensity').eval()
			#inV = hou.parm('/obj/'+ str(each) +'/ar_intensity').eval()
			#expV = hou.parm('/obj/'+ str(each) +'/ar_exposure').eval()
			expV = each.parm('ar_exposure').eval()
			#print (inV,expV)
			inV = inV*multVal
			expV = expV*multVal
			#print (inV,expV)
			if multVal != 0:
				each.parm('ar_intensity').set(inV)
				#hou.parm('/obj/'+ str(each) +'/ar_intensity').set(inV)
				each.parm('ar_exposure').set(expV)
				#hou.parm('/obj/'+ str(each) +'/ar_exposure').set(expV)
				
				
	#TARGET LIGHTS FUNC
	def getTarget(self,*args):
		self.mw.lighttar_list.clear()
		try:
			targNode = hou.selectedNodes()[0]
			self.mw.lighttar_list.addItem(str(targNode))
			addNode = targNode.path()
			#addNode = '/obj/' + str(targNode) + '/' 
			#print(targNode)
			global selNodes
			for each in selNodes:
				each.parm('lookatpath').set(addNode)
				#hou.parm('/obj/' + str(each) + '/lookatpath').set(addNode)
		except:
			self.consoleUpdate("Please Select a Node to Target.")
	def clearTar(self,*args):
		#Clear Var
		self.mw.lighttar_list.clear()
	def removeTar(self,*args):
		global selNodes
		for each in selNodes:
			each.parm('lookatpath').set('')
			#hou.parm('/obj/' + str(each) + '/lookatpath').set('')
			
	#LIGHT GROUP FUNC
	def setLG(self,*args):
		aovG = self.mw.lineEdit.text()
		if aovG != '':
			global selNodes
			for each in selNodes:
				each.parm('ar_aov').set(aovG)
				#hou.parm('/obj/' + str(each) + '/ar_aov').set(aovG)
		else:
			self.consoleUpdate("Please Enter a Light Group name.")
	def clearLG(self,*args):
		global selNodes
		for each in selNodes:
			each.parm('ar_aov').set('')
			#hou.parm('/obj/' + str(each) + '/ar_aov').set('')
			
	#Colour Set
	def cdMapper(self,*args):
		global cdR, cdG, cdB
		
		temp2 = QPixmap(cd_pix2)
		#temp2 = cd_pix2
		#mask = QPixmap(cd_pix2_alpha)
		
		mult = 255
		R = cdR * mult
		G = cdG *mult
		B = cdB * mult
		colour = QColor(R,G,B)
		#print("R:" + str(cdR) + " G:" + str(cdG) + " B:" + str(cdB))
		
		#Paint Lines
		painter2 = QPainter(temp2)
		painter2.setCompositionMode(painter2.CompositionMode_Overlay)
		painter2.fillRect(temp2.rect(), colour)
		painter2.end()
		 
		#Update Image
		self.mw.lbl_LGTC_PRV.setPixmap(temp2)
		
	#Colour Set Parse (R, G, B)
	def cdSet(self,chan):
		global cdR, cdG, cdB 
		#Get Value from Channel
		if chan == 'r':
			cdV = float(self.mw.Cd_Slider_R.value())/100
			self.mw.r_out.setText("Red    :  " + str(cdV) + "  ")
			cdR = cdV
		elif chan == 'g':
			cdV = float(self.mw.Cd_Slider_G.value())/100
			self.mw.g_out.setText("Green:  " + str(cdV) + "  ")
			cdG = cdV
		elif chan == 'b':
			cdV = float(self.mw.Cd_Slider_B.value())/100
			self.mw.b_out.setText("Blue   :  " + str(cdV) + "  ")
			cdB = cdV
		#Update Cd
		self.cdMapper()
		#Update Node Tree
		for each in selNodes:
			each.parm(('ar_color'+str(chan))).set(cdV)
			#hou.parm('/obj/'+ str(each) +'/ar_color' + chan).set(cdV)

	###########################################################################

	## CLOSE EVENT OF WINDOW
	def closeEvent(self,event):
		print("Daz to Houdini NEO: closing Render Window (ropWindow) " + sessID1 + '.')